@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.Extensions.Configuration

@inject GearlistFront.Model.AppData AppData
@inject IAccessTokenProvider AuthenticationService
@inject IConfiguration Configuration
@inject NotificationService NotificationService

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <RadzenProgressBar @bind-Value="Progress" Visible="ProgBarVisible" />

    <table class="table">
        <tr>
            <td>Type</td>
            <td><RadzenTextBox Placeholder="Eg. guitar, bass, keyboard..." @bind-Value="model.Type" /></td>
        </tr>
        <tr>
            <td>Manufacturer</td>
            <td><RadzenTextBox Placeholder="Eg. Martin, Sigma, Roland..." @bind-Value="model.Manufacturer" /></td>
        </tr>
        <tr>
            <td>Model</td>
            <td><RadzenTextBox Placeholder="Eg. D28, 000M-15+, TR-808..." @bind-Value="model.Model" /></td>
        </tr>
        <tr>
            <td>Serial number</td>
            <td><RadzenTextBox @bind-Value="model.Serial" /></td>
        </tr>
        <tr>
            <td>Year</td>
            <td><RadzenTextBox @bind-Value="model.Year" /></td>
        </tr>
        <tr>
            <td>Purchase date</td>
            <td><RadzenDatePicker DateFormat="dd.MM.yyyy" @bind-Value="model.PurchaseDate" /></td>
        </tr>
        <tr>
            <td>Notes</td>
            <td><RadzenTextBox @bind-Value="model.Notes"></RadzenTextBox></td>
        </tr>
        <tr>
            <td>Images</td>
            <td>
                <InputFile OnChange="FileChanged" UnmatchedParameters="InputParams" />

                @if (SelectedFiles != null)
                {
                    foreach (var file in SelectedFiles)
                    {
                        <RadzenCard>
                            @file.Name (@file.Size)
                        </RadzenCard>
                    }
                }
            </td>
        </tr>
        @if (model.Images.Count > 0)
        {
            foreach (var image in model.Images)
            {
                string localImage = image;
                Guid id = model.Id.GetValueOrDefault();
                <tr>
                    <td></td>
                    <td>
                        <div class="img_container">
                            <RadzenImage Style="margin-top: 0.5em; max-width: 500px;" Path="@GenerateImageUrl(model.GearId, image)" />
                            <div class="overlay">
                                <span @onclick="@(() => DeleteImage(id, localImage))" class="oi oi-trash"></span>
                            </div>
                        </div>
                    </td>
                </tr>
            }
        }


    </table>
    <RadzenButton ButtonType="ButtonType.Submit" Text="Save"></RadzenButton>
</EditForm>

@code {

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    public string Sub { get; set; }

    [Parameter]
    public double Progress { get; set; }

    [Parameter]
    public bool ProgBarVisible { get; set; }

    [Parameter]
    public IFileListEntry[] SelectedFiles { get; set; }

    [Parameter]
    public Action<IFileListEntry[]> SelectedFilesChanged { get; set; }

    Dictionary<string, object> InputParams { get; set; } =
        new Dictionary<string, object>()
        {
            {"accept", "image/jpg,image/jpeg,image/png" },
            {"multiple", "multiple" }
                        };

    public void FileChanged(IFileListEntry[] files)
    {
        SelectedFiles = files;
        SelectedFilesChanged?.Invoke(files);
    }

    private GearModel model;


    public string GenerateImageUrl(Guid? gearId, string image)
    {
        return String.IsNullOrEmpty(image) ? "" :
            $"https://gearlistweb.blob.core.windows.net/images/{Sub}/{gearId.ToString()}/{image}";
    }

    protected override void OnInitialized()
    {
        if (model == null)
        {
            model = AppData.Model;
        }
    }

    private async Task DeleteImage(Guid Id, string Image)
    {
        Console.WriteLine("trying to delete " + Image);
        var httpClient = new HttpClient();
        var tokenResult = await AuthenticationService.RequestAccessToken();

        if (tokenResult.TryGetToken(out var token))
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
            var response = await httpClient.SendAsync(new HttpRequestMessage(HttpMethod.Delete,
                $"{Configuration["BaseURL"]}/api/DeleteImage?id={Id}&image={Image}"
            ));
            if (response.IsSuccessStatusCode)
            {
                /*
                await ShowNotification(new NotificationMessage()
                {
                    Severity = NotificationSeverity.Info,
                    Summary = "Image deleted",
                    Detail = "Image successfully deleted",
                    Duration = 3000
                });*/
                model.Images.Remove(Image);
                StateHasChanged();
            }

        }
    }

    async Task ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

        await InvokeAsync(() => { StateHasChanged(); });
    }
}
<p></p>