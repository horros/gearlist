@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.Extensions.Configuration

@inject GearlistFront.Model.AppData AppData
@inject IAccessTokenProvider AuthenticationService
@inject IConfiguration Configuration

    

    <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <MatProgressBar Progress="Progress" Closed="ProgBarVisible" />

    <table class="table">
        <tr>
            <td><MatTextField Label="Type" PlaceHolder="Eg. guitar, bass, keyboard..." @bind-Value="model.Type" /></td>
        </tr>
        <tr>
            <td><MatTextField Label="Manufacturer" Placeholder="Eg. Martin, Sigma, Roland..." @bind-Value="model.Manufacturer" /></td>
        </tr>
        <tr>
            <td><MatTextField Label="Model" Placeholder="Eg. D28, 000M-15+, TR-808..." @bind-Value="model.Model" /></td>
        </tr>
        <tr>
            <td><MatTextField Label="Serial number" @bind-Value="model.Serial" /></td>
        </tr>
        <tr>
            <td><MatTextField Label="Year" @bind-Value="model.Year" /></td>
        </tr>
        <tr>
            <td><MatDatePicker Required="false" Label="Purchase date" Format="yyyy-MM-dd" @bind-Value="model.PurchaseDate" /></td>
        </tr>
        <tr>
            <td><MatTextField Label="Notes" TextArea="true" @bind-Value="model.Notes" /></td>
        </tr>
        <tr>
            <td>
                <MatFileUpload AllowMultiple="true" OnChange="FileChanged" UnmatchedParameters="InputParams" />

                @if (SelectedFiles != null)
                {
                    foreach (var file in SelectedFiles)
                    {
                        <p>@file.Name (@file.Size)</p>    
                    }
                }
            </td>
        </tr>
        @if (model.Images.Count > 0)
        {
            foreach (var image in model.Images)
            {
                string localImage = image;
                Guid id = model.Id.GetValueOrDefault();
                <tr>
                    <td>
                        <div style="max-width: 300px;" class="img_container">
                            <img style="margin-top: 0.5em; max-width: 200px; max-height: 200px;" src="@GenerateImageUrl(model.GearId, image)" />
                            <div class="overlay">
                                <span @onclick="@(() => DeleteImage(id, localImage))" class="oi oi-trash"></span>
                            </div>
                        </div>
                    </td>
                </tr>
            }
        }


    </table>
    <MatButton Raised="true" Type="submit">Save</MatButton>
    </EditForm>


@code {
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    public string Sub { get; set; }

    [Parameter]
    public double Progress { get; set; }

    [Parameter]
    public bool ProgBarVisible { get; set; }

    [Parameter]
    public IMatFileUploadEntry[] SelectedFiles { get; set; }

    [Parameter]
    public Action<IMatFileUploadEntry[]> SelectedFilesChanged { get; set; }

    Dictionary<string, object> InputParams { get; set; } =
        new Dictionary<string, object>()
        {
    {"accept", "image/jpg,image/jpeg,image/png" },
    {"multiple", "multiple" }
                };

    public void FileChanged(IMatFileUploadEntry[] files)
    {
        SelectedFiles = files;
        SelectedFilesChanged?.Invoke(files);
    }

    private GearModel model;


    public string GenerateImageUrl(Guid? gearId, string image)
    {
        return String.IsNullOrEmpty(image) ? "" :
        $"https://gearlistweb.blob.core.windows.net/images/{Sub}/{gearId.ToString()}/{image}";
    }

    protected override void OnInitialized()
    {
        if (model == null)
        {
            model = AppData.Model;
        }
    }

    private async Task DeleteImage(Guid Id, string Image)
    {
        Console.WriteLine("trying to delete " + Image);
        var httpClient = new HttpClient();
        var tokenResult = await AuthenticationService.RequestAccessToken();

        if (tokenResult.TryGetToken(out var token))
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
            var response = await httpClient.SendAsync(new HttpRequestMessage(HttpMethod.Delete,
                $"{Configuration["BaseURL"]}/api/DeleteImage?id={Id}&image={Image}"
            ));
            if (response.IsSuccessStatusCode)
            {

                // YAY
                model.Images.Remove(Image);
                StateHasChanged();
            }

        }
    }



}
<p></p>