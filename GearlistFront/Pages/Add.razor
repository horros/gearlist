@page "/add"
@using GearlistFront.Model
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Configuration
@using GearlistFront.Components

@inject NavigationManager NavigationManager
@inject IAccessTokenProvider AuthenticationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject GearlistFront.Model.AppData AppData
@inject IConfiguration Configuration

@attribute [Authorize]
<AuthorizeView>
    <MatH3>New Gear</MatH3>

    <GearForm Progress="@Progress"
              ProgBarVisible="ProgBarVisible"
              OnValidSubmit="HandleSubmit"
              SelectedFiles="SelectedFiles"
              SelectedFilesChanged="SelectedFilesChanged"
              Sub="@Sub" />


    <MatDialog @bind-IsOpen="@DialogIsOpen">
        <MatDialogTitle>Flag gear as stolen</MatDialogTitle>
        <MatDialogContent>
            <p>You are flagging gear as stolen.</p>
            <p>Please provide the date of the theft.</p>
            <p>
                <MatDatePicker Required="true" Format="yyyy-MM-dd" @bind-Value="@DateStolen" />
            </p>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton Raised="false" OnClick="@(e => {DialogIsOpen = false; model.Stolen = false; })">Cancel</MatButton>
            <MatButton Raised="true" OnClick="@HandleIsStolen">OK</MatButton>
        </MatDialogActions>
    </MatDialog>

    @code {

        protected double Progress = 0;
        protected bool ProgBarVisible = false;
        protected string Sub = "";
        private StolenItem StolenItem;
        private Boolean DialogIsOpen = false;
        protected DateTime? DateStolen;

        public IMatFileUploadEntry[] SelectedFiles;

        GearModel model = null;

        public void SelectedFilesChanged(IMatFileUploadEntry[] SelectedFiles)
        {
            this.SelectedFiles = SelectedFiles;
        }

        private void HandleIsStolen()
        {
            if (model.Stolen == true)
            {
                if (DateStolen.HasValue && DateStolen.Value.Year > 1)
                {
                    StolenItem = new StolenItem
                    {
                        DateStolen = DateStolen.Value,
                        id = Guid.NewGuid().ToString(),
                        Owner = Sub,
                        Serial = model.Serial
                    };
                    DialogIsOpen = false;
                    HandleValidSubmit();
                } else
                {
                    model.Stolen = false;
                    StolenItem = null;
                }
            } else
            {
                StolenItem = null;
                HandleValidSubmit();
            }
        }


        protected override async Task OnInitializedAsync()
        {
            model = new GearModel();
            model.Images = new List<string>();
            AppData.Model = model;
            Progress = 10;
            var tokenResult = await AuthenticationService.RequestAccessToken();
            if (tokenResult.TryGetToken(out var token))
            {
                var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                Sub = state.User.Claims.Where(c => c.Type == "sub").FirstOrDefault().Value;
            }
        }


        private void HandleSubmit()
        {
            if (model.Stolen == true)
            {
                DialogIsOpen = true;
            } else
            {
                HandleValidSubmit();
            }
        }

        private async void HandleValidSubmit()
        {
            var numFiles = 0;
            if (SelectedFiles != null)
            {
                numFiles = SelectedFiles.Length;
            }
            Progress = 100 / (numFiles + 1);
            Console.WriteLine("Progress: " + Progress);
            ProgBarVisible = true;

            var httpClient = new HttpClient();
            var tokenResult = await AuthenticationService.RequestAccessToken();

            if (tokenResult.TryGetToken(out var token))
            {

                httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
                var sastokenresponse = await httpClient.SendAsync(new HttpRequestMessage(HttpMethod.Get,
                    Configuration["BaseURL"] + "/api/GenerateContainerSAS"
                    ));

                var sastokenstring = await sastokenresponse.Content.ReadAsStringAsync();

                SASToken data = JsonSerializer.Deserialize<SASToken>(sastokenstring);

                var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var sub = "";
                foreach (var claim in state.User.Claims)
                {
                    if (claim.Type == "sub") sub = claim.Value;
                }
                if (String.IsNullOrEmpty(sub))
                {
                    throw new Exception("Could not get subject from claims");
                }

                var guid = Guid.NewGuid();

                model.GearId = guid;

                if (numFiles > 0)
                {
                    var uploadUrl = data.Uri;

                    string nnow = DateTime.UtcNow.ToString("R", System.Globalization.CultureInfo.InvariantCulture);

                    var fileIdx = 0;
                    httpClient.DefaultRequestHeaders.Clear();
                    httpClient.DefaultRequestHeaders.Add("x-ms-date", nnow);
                    httpClient.DefaultRequestHeaders.Add("x-ms-version", "2017-07-29");
                    httpClient.DefaultRequestHeaders.Add("x-ms-blob-type", "BlockBlob");
                    foreach (var file in SelectedFiles)
                    {
                        Progress = 100 / (numFiles - fileIdx);
                        StateHasChanged();
                        await Task.Delay(1);
                        using (var stream = new System.IO.MemoryStream())
                        {
                            await file.WriteToStreamAsync(stream);
                            stream.Seek(0, System.IO.SeekOrigin.Begin);
                            StreamContent sc = new StreamContent(stream);
                            var url = $"https://gearlistweb.blob.core.windows.net/images/" + sub + "/" + guid.ToString() + "/" + file.Name + data.Token;
                            var r = await httpClient.PutAsync(url, sc);

                            if (r.IsSuccessStatusCode)
                            {
                                model.Images.Add(file.Name);
                            }
                            fileIdx++;
                        }


                    }

                }

                httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);

                if (model.PurchaseDate?.Year == 1)
                {
                    model.PurchaseDate = null;
                }

                var response = await httpClient.PostAsJsonAsync(
                    Configuration["BaseURL"] + "/api/AddGear",
                    model);

                response.EnsureSuccessStatusCode();

                if (model.Stolen == true)
                {
                    var setStolenResponse = await httpClient.PostAsJsonAsync<StolenItem>(
                        Configuration["BaseURL"] + "/api/FlagAsStolen",
                        StolenItem);
                    setStolenResponse.EnsureSuccessStatusCode();
                }

                NavigationManager.NavigateTo("/list");
            }
            else
            {
                throw new Exception("Could not get token");
            }

        }

    }
</AuthorizeView>
