@page "/mygear"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager Navigation
@inject IAccessTokenProvider AuthenticationService
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize]
<h3>My Gear</h3>

<RadzenButton Click="NewGear" Text="Add gear"></RadzenButton>

@if (@gear == null)
{
    <p><em>Loading gear...</em></p>
}
else
{

    <RadzenDataList WrapItems="false" AllowPaging="false" Data="@gear" TItem="GearModel">
        <Template Context="item">
            <RadzenCard Style="width: 300px;">
                <div class="row">
                    <div class="col-md-6">
                        <div>Type:</div>
                        <b>@item.Type</b>
                        <div style="margin-top:20px">Manufacturer:</div>
                        <b>@item.Manufacturer</b>
                        <br />
                        <RadzenImage Path="@GenerateImageUrl(item)" Style="width:100px;" />
                    </div>
                    <div class="col-md-6">
                        <div>Model:</div>
                        <b>@item.Model</b>
                        <div style="margin-top:20px">Year:</div>
                        <b>@item.Year</b>
                        <div style="margin-top:20px">Serial number:</div>
                        <b>@item.Serial</b>
                        <div style="margin-top:20px">Notes:</div>
                        <b>@item.Notes</b>
                    </div>
                </div>
            </RadzenCard>
        </Template>

    </RadzenDataList>
}

@code {

    private IEnumerable<GearModel> gear;
    string sub = "";
    string image = "";

    public void NewGear()
    {
        Navigation.NavigateTo("/newgear");
    }

    public string GenerateImageUrl(GearModel model)
    {
        image = model.Images != null && model.Images.FirstOrDefault() != null ?
            $"https://gearimages.blob.core.windows.net/images/{sub}/{model.GearId}/{model.Images.First()}" :
            "";
        Console.WriteLine("Generate image URL: " + image);
        return image;
    }

    protected override async Task OnInitializedAsync()
    {
        if (gear == null)
        {
            try
            {
                var httpClient = new HttpClient();

                var tokenResult = await AuthenticationService.RequestAccessToken();

                if (tokenResult.TryGetToken(out var token))
                {
                    httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
                    gear = await httpClient.GetJsonAsync<IEnumerable<GearModel>>("https://gearlistcloudapp.azurewebsites.net/api/ListGear");
                }

                var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                foreach (var claim in state.User.Claims)
                {
                    if (claim.Type == "sub") sub = claim.Value;
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        }
    }
}
