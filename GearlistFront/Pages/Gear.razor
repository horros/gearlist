@page "/gear"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager Navigation
@inject IAccessTokenProvider AuthenticationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject GearlistFront.Model.AppData AppData
@inject DialogService dialogService

@attribute [Authorize]
<h3>Details</h3>

@if (@gear == null)
{
    <p><em>Loading gear...</em></p>
}
else
{


    <RadzenCard Style="width: 600px;">
        <div class="row">
            <div class="col-md-6">
                <div>Type:</div>
                <b>@gear.Type</b>
                <div style="margin-top:20px">Manufacturer:</div>
                <b>@gear.Manufacturer</b>
                <br />
            </div>
            <div class="col-md-6">
                <div>Model:</div>
                <b>@gear.Model</b>
                <div style="margin-top:20px">Year:</div>
                <b>@gear.Year</b>
                <div style="margin-top:20px">Serial number:</div>
                <b>@gear.Serial</b>
                <div style="margin-top:20px">Notes:</div>
                <b>@gear.Notes</b>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                @foreach (var image in gear.Images)
                {
                    <RadzenImage Style="margin-top: 0.5em; width: 100%;" Path="@GenerateImageUrl(gear.GearId, image)" />
                }
            </div>
        </div>
        <div class="row mt-1">
            <div class="col-md-6">
                <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Secondary" Text="EDIT"></RadzenButton>
            </div>
            <div class="col-md-6">
                <RadzenButton Click="@ShowDeleteDialog" ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Text="DELETE"></RadzenButton>
            </div>
        </div>
    </RadzenCard>
}

@code {

    private GearModel gear;
    string sub = "";

    public string GenerateImageUrl(Guid gearId, string image)
    {
        return String.IsNullOrEmpty(image) ? "" :
            $"https://gearlistweb.blob.core.windows.net/images/{sub}/{gearId.ToString()}/{image}";
    }

    protected override async Task OnInitializedAsync()
    {
        if (gear == null)
        {
            var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            foreach (var claim in state.User.Claims)
            {
                if (claim.Type == "sub") sub = claim.Value;
            }
            gear = AppData.Model;
        }
    }

    async Task ShowDeleteDialog() => await dialogService.OpenAsync("Delete", ds =>
    @<RadzenCard Style="padding: 20px;">
        <p Style="margin-bottom: 10px;">Are you sure you want to delete this item?</p>
        <div class="row">
            <div class="col-md-12">
                <RadzenButton Text="Ok" Click="()=> DeleteItem(ds)" Style="margin-bottom: 10px; width: 150px" />
                <RadzenButton Text="Cancel" Click="()=> ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Style="margin-bottom: 10px; width: 150px" />
            </div>
        </div>
    </RadzenCard>);

    async Task DeleteItem(DialogService ds)
    {
        var httpClient = new HttpClient();
        var tokenResult = await AuthenticationService.RequestAccessToken();

        if (tokenResult.TryGetToken(out var token))
        {
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
            var response = await httpClient.SendAsync(new HttpRequestMessage(HttpMethod.Delete,
                $"https://gearlistfuncs.azurewebsites.net/api/DeleteItem?code=B8KbJTAZT9JoVS7R6u7//OVHYyhR1v2aTTKiXaGVymFYBkfU3BOaPg==&id={gear.Id}"
                //$"http://localhost:7071/api/DeleteItem?id={gear.Id}"
            ));
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/mygear");
                ds.Close();
            }
        }
    }

}
