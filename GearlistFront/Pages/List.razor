@page "/list"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Configuration
@using MatBlazor

@inject NavigationManager Navigation
@inject IAccessTokenProvider AuthenticationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject GearlistFront.Model.AppData AppData
@inject IConfiguration Configuration

@attribute [Authorize]
<AuthorizeView>
           <style>
            .demo-mat-card {
                max-width: 400px;
            }
 
            .demo-mat-card-content {
                padding: 1rem;
            }
 
            .demo-mat-card-clean-margin {
                margin: 0px;
            }
        </style>
    <h3>My Gear</h3>
    <MatButton Raised="true" OnClick="@NewGear">Add gear</MatButton>

    @if (gear == null)
    {
        <div>Loading...</div>
    }
    else
    {
        if (gear.Count() > 0)
        {
            var rows = gear
                .Select((x, i) => new { x, i })
                .GroupBy(p => (p.i / 3), p => p.x);
    
            <div class="mat-layout-grid mat-layout-grid-align-left" style="max-width: 1400px;">

            
            @foreach(var row in rows)
            {
                <div class="mat-layout-grid-inner">
                @foreach(var item in row)
                {
                    
                    <div class="mat-layout-grid-cell" style="margin-bottom: 2em;" @onclick="@((e) => GoTo(item))">
                        <MatCard class="demo-mat-card" >
                            <MatCardContent>
                                <MatCardMedia Wide="true" ImageUrl="@GenerateImageUrl(item)"></MatCardMedia>
                            <div class="demo-mat-card-content">
                                <MatHeadline6 class="demo-mat-card-clean-margin">
                                    @(item.Manufacturer) @(item.Model)
                                </MatHeadline6>
                            </div>
                            </MatCardContent>
                        </MatCard>
                    </div>
                }
                </div>
            }
            </div>
        }

    }

    @code {
        private IEnumerable<GearModel> gear;
        string sub = "";
        string image = "";

        public void NewGear()
        {
            Navigation.NavigateTo("/add");
        }

        private void GoTo(GearModel item)
        {
            AppData.Model = item;
            Navigation.NavigateTo("/view");
        }

        public string GenerateImageUrl(GearModel model)
        {
            image = model.Images != null && model.Images.FirstOrDefault() != null ?
                $"https://gearlistweb.blob.core.windows.net/images/{sub}/{model.GearId}/{model.Images.First()}" :
                "";
            return image;
        }

        protected override async Task OnInitializedAsync()
        {
            if (gear == null)
            {
                var httpClient = new HttpClient();

                var tokenResult = await AuthenticationService.RequestAccessToken();
                if (tokenResult.TryGetToken(out var token))
                {
                    if (token != null)
                    {
                        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
                        gear = await httpClient.GetFromJsonAsync<IEnumerable<GearModel>>(
                            Configuration["BaseURL"] + "/api/ListGear"
                        );
                        await InvokeAsync(() => { StateHasChanged(); });


                        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                        foreach (var claim in state.User.Claims)
                        {
                            if (claim.Type == "sub") sub = claim.Value;
                        }
                    }
                    else
                    {
                        Console.WriteLine("Token is null");
                    }

                }

            }
        }
    }
</AuthorizeView>