@page "/view"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Configuration
@using GearlistFront.Components 
@using MatBlazor

@inject NavigationManager Navigation
@inject IAccessTokenProvider AuthenticationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject GearlistFront.Model.AppData AppData
@inject IConfiguration Configuration
@inject IMatToaster Toaster

@attribute [Authorize]
<AuthorizeView>
    <MatH3>Details @if (gear != null && gear.Stolen == true) { <MatIcon Style="color: #D05A3D">warning</MatIcon>} </MatH3>
    @if (@gear == null)
    {
        <p><em>Loading gear...</em></p> 
    }
    else
    {
        <div class="mat-layout-grid">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell">

        <MatList TwoLine="true">
            <MatListItem>
                <MatListItemText>
                    <MatListItemPrimaryText>Type</MatListItemPrimaryText>
                    <MatListItemSecondaryText>@(gear.Type ?? "N/A")</MatListItemSecondaryText>
                </MatListItemText>
            </MatListItem>
            <MatListItem>
                <MatListItemText>
                    <MatListItemPrimaryText>Manufacturer</MatListItemPrimaryText>
                    <MatListItemSecondaryText>@(gear.Manufacturer ?? "N/A")</MatListItemSecondaryText>
                </MatListItemText>
            </MatListItem>
            <MatListItem>
                <MatListItemText>
                    <MatListItemPrimaryText>Model</MatListItemPrimaryText>
                    <MatListItemSecondaryText>@(gear.Model ?? "N/A")</MatListItemSecondaryText>
                </MatListItemText>
            </MatListItem>
            <MatListItem>
                <MatListItemText>
                    <MatListItemPrimaryText>Serial number</MatListItemPrimaryText>
                    <MatListItemSecondaryText>@(gear.Serial ?? "N/A")</MatListItemSecondaryText>
                </MatListItemText>
            </MatListItem>
            <MatListItem>
                <MatListItemText>
                    <MatListItemPrimaryText>Year</MatListItemPrimaryText>
                    <MatListItemSecondaryText>@(gear.Year ?? "N/A")</MatListItemSecondaryText>
                </MatListItemText>
            </MatListItem>
            <MatListItem>
                <MatListItemText>
                    <MatListItemPrimaryText>Purchase date</MatListItemPrimaryText>
                    <MatListItemSecondaryText>@(purchaseDate ?? "N/A")</MatListItemSecondaryText>
                </MatListItemText>
            </MatListItem>
            <MatListItem>
                <MatListItemText>
                    <MatListItemPrimaryText>Notes</MatListItemPrimaryText>
                    <MatListItemSecondaryText>@(gear.Notes ?? "N/A")</MatListItemSecondaryText>
                </MatListItemText>
            </MatListItem>
        </MatList>
        <MatButton Raised="true" Icon="edit" OnClick="@(() => Edit())">EDIT</MatButton>
        <MatButton Raised="true" Icon="delete" OnClick="@(() => { dialogIsOpen = true; })" Style="background-color: #D05A3D">DELETE</MatButton>

                </div>
                <div class="mat-layout-grid-cell">
                    @if (gear.Images.Count > 0)
                    {
                        <GearImage Src="@currImageUrl" />
                        <div style="width: 100%; max-height: 220px; white-space: nowrap; overflow-y: hidden; overflow-x: auto; margin-top: 1em;">
                            @foreach (var img in gear.Images)
                            {
                                <img @onclick="@(() => SwitchImage(GenerateImageUrl(gear.GearId, img)))" src="@GenerateImageUrl(gear.GearId, img)" style="max-width: 150px; max-height: 150px; padding-right: 0.5em;" />
                            }
                        </div>
                    }
                </div>
            </div>
        </div>

        @if (gear.Stolen)
        {
            <MatH5 Style="color: #D05A3D">You have flagged this item as stolen</MatH5>
        }

        <MatDialog @bind-IsOpen="@dialogIsOpen">
            <MatDialogTitle>Delete gear</MatDialogTitle>
            <MatDialogContent>
                <p>Are you sure you wish to permanently delete this item?</p>               
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="@(e => { dialogIsOpen = false; })">No Thanks</MatButton>
                <MatButton OnClick="@(() => DeleteItem(gear))">Yes, delete it</MatButton>
            </MatDialogActions>
        </MatDialog>
    }

    @code {

        string currImageUrl;
        string purchaseDate;
        bool dialogIsOpen = false;

        private GearModel gear;
        string sub = "";

        public void SwitchImage(string NewImageUrl)
        {
            currImageUrl = NewImageUrl;
            this.StateHasChanged();
        }

        public string GenerateImageUrl(Guid gearId, string image)
        {
            return String.IsNullOrEmpty(image) ? "" :
                $"https://gearlistweb.blob.core.windows.net/images/{sub}/{gearId.ToString()}/{image}";
        }

        protected override async Task OnInitializedAsync()
        {

            if (AppData.Model == null)
            {
                Navigation.NavigateTo("/list");
                return;

            }

            if (gear == null)
            {
                var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();

                sub = state.User.Claims
                    .Where(x => x.Type == "sub")
                    .Select(x => x.Value)
                    .FirstOrDefault();

                if (sub == null)
                {
                    Navigation.NavigateTo("/list");
                    return;
                }

                gear = AppData.Model;
                if (AppData.Model.Images.Count > 0)
                {
                    currImageUrl = GenerateImageUrl(gear.GearId, gear.Images[0]);
                }
                if (gear.PurchaseDate.HasValue)
                {
                    purchaseDate = ((DateTime)gear.PurchaseDate).ToString("yyyy-MM-dd");
                }
            }

        }

        void Edit()
        {
            Navigation.NavigateTo("/edit");
        }

        async Task DeleteItem(GearModel gear)
        {
            var httpClient = new HttpClient();
            var tokenResult = await AuthenticationService.RequestAccessToken();

            if (tokenResult.TryGetToken(out var token))
            {
                httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Value);
                var response = await httpClient.SendAsync(new HttpRequestMessage(HttpMethod.Delete,
                    $"{Configuration["BaseURL"]}/api/DeleteGear?id={gear.Id}"
                ));
                if (response.IsSuccessStatusCode)
                {
                    dialogIsOpen = false;
                    this.StateHasChanged();
                    Toaster.Add("Item successfully deleted", MatToastType.Success, "Item deleted", "delete") ;
                    gear = null;
                    await Task.Delay(3500);
                    Navigation.NavigateTo("/list");
                    return;
                }
                else
                {
                    dialogIsOpen = false;
                    this.StateHasChanged();
                    Toaster.Add("Item could not be deleted", MatToastType.Success, "Item not deleted", "delete") ;
                    return;
                }
            }
        }


    }
</AuthorizeView>
